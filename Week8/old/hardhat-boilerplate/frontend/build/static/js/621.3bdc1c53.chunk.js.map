{"version":3,"file":"static/js/621.3bdc1c53.chunk.js","mappings":"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","sources":["../node_modules/alchemy-sdk/src/internal/request-batcher.ts","../node_modules/alchemy-sdk/src/api/alchemy-provider.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/base64/src.ts/browser-base64.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/networks/src.ts/index.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/networks/src.ts/_version.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/providers/src.ts/_version.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/hash/src.ts/ens-normalize/decoder.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/hash/src.ts/ens-normalize/lib.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/hash/src.ts/ens-normalize/include.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/hash/src.ts/namehash.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/providers/src.ts/formatter.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/constants/src.ts/addresses.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/providers/src.ts/base-provider.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/constants/src.ts/hashes.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/web/src.ts/browser-geturl.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/web/src.ts/index.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/web/src.ts/_version.ts"],"sourcesContent":["import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = { ...this.connection };\n    batcherConnection.headers!['Alchemy-Ethers-Sdk-Method'] = 'batchSend';\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n","\"use strict\";\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nexport function decode(textData: string): Uint8Array {\n    textData = atob(textData);\n    const data = [];\n    for (let i = 0; i < textData.length; i++) {\n        data.push(textData.charCodeAt(i));\n    }\n    return arrayify(data);\n}\n\nexport function encode(data: BytesLike): string {\n    data = arrayify(data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n}\n\n\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\" ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [ \"ropsten\" ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\n// See: https://chainlist.org\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n","export const version = \"networks/5.7.1\";\n","export const version = \"providers/5.7.2\";\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nexport type Numbers = Uint8Array | Array<number>;\nexport type NextFunc = (...args: Array<any>) => number;\n\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array: Array<any>, depth?: number): Array<any> {\n    if (depth == null) { depth = 1; }\n    const result: Array<any> = [];\n\n    const forEach = result.forEach;\n\n    const flatDeep = function (arr: Array<any>, depth: number) {\n        forEach.call(arr, function (val: any) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            } else {\n               result.push(val);\n            }\n        });\n    };\n\n    flatDeep(array, depth);\n    return result;\n}\n\nfunction fromEntries<T extends string | number | symbol = string | number | symbol, U = any>(array: Array<[T, U]>): Record<T, U> {\n    const result: Record<T, U> = <Record<T, U>>{ };\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\n\nexport function decode_arithmetic(bytes: Numbers): Array<number> {\n\tlet pos = 0;\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n\t\n\t// decode the frequency table\n\tlet symbol_count = u16();\n\tlet total = 1;\n\tlet acc = [0, 1]; // first symbol has frequency 1\n\tfor (let i = 1; i < symbol_count; i++) {\n\t\tacc.push(total += u16());\n\t}\n\n\t// skip the sized-payload that the last 3 symbols index into\n\tlet skip = u16();\n\tlet pos_payload = pos;\n\tpos += skip;\n\n\tlet read_width = 0;\n\tlet read_buffer = 0; \n\tfunction read_bit() {\n\t\tif (read_width == 0) {\n\t\t\t// this will read beyond end of buffer\n\t\t\t// but (undefined|0) => zero pad\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\n\t\t\tread_width = 8;\n\t\t}\n\t\treturn (read_buffer >> --read_width) & 1;\n\t}\n\n\tconst N = 31;\n\tconst FULL = 2**N;\n\tconst HALF = FULL >>> 1;\n\tconst QRTR = HALF >> 1;\n\tconst MASK = FULL - 1;\n\n\t// fill register\n\tlet register = 0;\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\n\n\tlet symbols = [];\n\tlet low = 0;\n\tlet range = FULL; // treat like a float\n\twhile (true) {\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\n\t\tlet start = 0;\n\t\tlet end = symbol_count;\n\t\twhile (end - start > 1) { // binary search\n\t\t\tlet mid = (start + end) >>> 1;\n\t\t\tif (value < acc[mid]) {\n\t\t\t\tend = mid;\n\t\t\t} else {\n\t\t\t\tstart = mid;\n\t\t\t}\n\t\t}\n\t\tif (start == 0) break; // first symbol is end mark\n\t\tsymbols.push(start);\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1\n\t\twhile (((a ^ b) & HALF) == 0) {\n\t\t\tregister = (register << 1) & MASK | read_bit();\n\t\t\ta = (a << 1) & MASK;\n\t\t\tb = (b << 1) & MASK | 1;\n\t\t}\n\t\twhile (a & ~b & QRTR) {\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n\t\t\ta = (a << 1) ^ HALF;\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\n\t\t}\n\t\tlow = a;\n\t\trange = 1 + b - a;\n\t}\n\tlet offset = symbol_count - 4;\n\treturn symbols.map(x => { // index into payload\n\t\tswitch (x - offset) {\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 1: return offset + bytes[pos_payload++];\n\t\t\tdefault: return x - 1;\n\t\t}\n\t});\n}\t\n\n\n// returns an iterator which returns the next symbol\nexport function read_payload(v: Numbers): NextFunc {\n\tlet pos = 0;\n\treturn () => v[pos++];\n}\nexport function read_compressed_payload(bytes: Numbers): NextFunc {\n\treturn read_payload(decode_arithmetic(bytes));\n}\n\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i: number): number { \n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\n}\n\nfunction read_counts(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0; i < n; i++) v[i] = 1 + next();\n\treturn v;\n}\n\nfunction read_ascending(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n\treturn v;\n}\n\nfunction read_deltas(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n\treturn v;\n}\n\nexport function read_member_array(next: NextFunc, lookup?: Record<number, number>) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next: NextFunc): Record<number, Array<number>> {\n\tlet ret = [];\n\twhile (true) {\n\t\tlet w = next();\n\t\tif (w == 0) break;\n\t\tret.push(read_linear_table(w, next));\n\t}\n\twhile (true) {\n\t\tlet w = next() - 1;\n\t\tif (w < 0) break;\n\t\tret.push(read_replacement_table(w, next));\n\t}\n\treturn fromEntries<number, Array<number>>(flat(ret));\n}\n\nexport function read_zero_terminated_array(next: NextFunc): Array<number> {\n\tlet v = [];\n\twhile (true) {\n\t\tlet i = next();\n\t\tif (i == 0) break;\n\t\tv.push(i);\n\t}\n\treturn v;\n}\n\nfunction read_transposed(n: number, w: number, next: NextFunc): Array<Array<number>> {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\n\n\nfunction read_linear_table(w: number, next: NextFunc): Array<Array<number | Array<number>>> {\n\tlet dx = 1 + next();\n\tlet dy = next();\n\tlet vN = read_zero_terminated_array(next);\n\tlet m = read_transposed(vN.length, 1+w, next);\n\treturn flat(m.map((v, i) => {\n\t  const x = v[0], ys = v.slice(1);\n\t\t//let [x, ...ys] = v;\n\t\t//return Array(vN[i]).fill().map((_, j) => {\n\t\treturn Array(vN[i]).fill(undefined).map((_, j) => {\n\t\t\tlet j_dy = j * dy;\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\n\t\t});\n\t}));\n}\n\nfunction read_replacement_table(w: number, next: NextFunc): Array<[ number, Array<number> ]> {\n\tlet n = 1 + next();\n\tlet m = read_transposed(n, 1+w, next);\n\treturn m.map(v => [v[0], v.slice(1)]);\n}\n\nexport type Branch = {\n    set: Set<number>;\n    node: Node;\n};\n\nexport type Node = {\n    branches: Array<Branch>;\n    valid: number;\n    fe0f: boolean;\n    save: boolean;\n    check: boolean;\n};\n\nexport function read_emoji_trie(next: NextFunc): Node {\n\tlet sorted = read_member_array(next).sort((a, b) => a - b);\n\treturn read();\n\tfunction read(): Node {\n\t\tlet branches = [];\n\t\twhile (true) {\n\t\t\tlet keys = read_member_array(next, sorted);\n\t\t\tif (keys.length == 0) break;\n\t\t\tbranches.push({set: new Set(keys), node: read()});\n\t\t}\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n \t\tlet temp = next();\n \t\tlet valid = temp % 3;\n \t\ttemp = (temp / 3)|0;\n \t\tlet fe0f = !!(temp & 1);\n \t\ttemp >>= 1;\n \t\tlet save = temp == 1;\n \t\tlet check = temp == 2;\n \t\treturn {branches, valid, fe0f, save, check};\n\t}\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\n\nimport { getData } from './include.js';\nconst r = getData();\n\nimport {read_member_array, read_mapped_map, read_emoji_trie} from './decoder.js';\n\n// @TODO: This should be lazily loaded\n\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\n\nfunction explode_cp(name: string): Array<number> {\n    return toUtf8CodePoints(name);\n}\n\nfunction filter_fe0f(cps: Array<number>): Array<number> {\n    return cps.filter(cp => cp != 0xFE0F);\n}\n\nexport function ens_normalize_post_check(name: string): string {\n\tfor (let label of name.split('.')) {\n\t\tlet cps = explode_cp(label);\n\t\ttry {\n\t\t\tfor (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n\t\t\t\tif (cps[i] !== UNDERSCORE) {\n\t\t\t\t\tthrow new Error(`underscore only allowed at start`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n\t\t\t\tthrow new Error(`invalid label extension`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthrow new Error(`Invalid label \"${label}\": ${err.message}`);\n\t\t}\n\t}\n\treturn name;\n}\n\nexport function ens_normalize(name: string): string {\n\treturn ens_normalize_post_check(normalize(name, filter_fe0f));\n}\n\nfunction normalize(name: string, emoji_filter: (a: Array<number>) => Array<number>): string {\n\tlet input = explode_cp(name).reverse(); // flip for pop\n\tlet output = [];\n\twhile (input.length) {\t\t\n\t\tlet emoji = consume_emoji_reversed(input);\n\t\tif (emoji) {\n\t\t\toutput.push(...emoji_filter(emoji));\n\t\t\tcontinue;\n\t\t}\n\t\tlet cp = input.pop();\n\t\tif (VALID.has(cp)) {\n\t\t\toutput.push(cp);\n\t\t\tcontinue;\n\t\t} \n\t\tif (IGNORED.has(cp)) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet cps = MAPPED[cp];\n\t\tif (cps) {\n\t\t\toutput.push(...cps);\n\t\t\tcontinue;\n\t\t}\n\t\tthrow new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n\t}\n\treturn ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\n\nfunction nfc(s: string): string {\n    return s.normalize('NFC');\n}\n\nfunction consume_emoji_reversed(cps: Array<number>, eaten?: Array<number>) {\n\tlet node = EMOJI_ROOT;\n\tlet emoji;\n\tlet saved;\n\tlet stack = [];\n\tlet pos = cps.length;\n\tif (eaten) eaten.length = 0; // clear input buffer (if needed)\n\twhile (pos) {\n\t\tlet cp = cps[--pos];\n\t\tnode = node.branches.find(x => x.set.has(cp))?.node;\n\t\tif (!node) break;\n\t\tif (node.save) { // remember\n\t\t\tsaved = cp;\n\t\t} else if (node.check) { // check exclusion\n\t\t\tif (cp === saved) break;\n\t\t}\n\t\tstack.push(cp);\n\t\tif (node.fe0f) {\n\t\t\tstack.push(0xFE0F);\n\t\t\tif (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n\t\t}\n\t\tif (node.valid) { // this is a valid emoji (so far)\n\t\t\temoji = stack.slice(); // copy stack\n\t\t\tif (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n\t\t\tcps.length = pos; // truncate\n\t\t}\n\t}\n\treturn emoji;\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { decode } from \"@ethersproject/base64\";\n\nimport {read_compressed_payload} from './decoder.js';\n\nexport function getData(): () => number {\n    return read_compressed_payload(decode(''));\n}\n\n","import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { ens_normalize } from \"./ens-normalize/lib\";\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp: Uint8Array): Uint8Array {\n    if (comp.length === 0) { throw new Error(\"invalid ENS name; empty component\"); }\n    return comp;\n}\n\nfunction ensNameSplit(name: string): Array<Uint8Array> {\n    const bytes = toUtf8Bytes(ens_normalize(name));\n    const comps: Array<Uint8Array> = [ ];\n\n    if (name.length === 0) { return comps; }\n\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) { throw new Error(\"invalid ENS name; empty component\"); }\n\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n\nexport function ensNormalize(name: string): string {\n    return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(\".\");\n}\n\nexport function isValidName(name: string): boolean {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    } catch (error) { }\n    return false;\n}\n\nexport function namehash(name: string): string {\n    /* istanbul ignore if */\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n\n    let result: string | Uint8Array = Zeros;\n\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256(comps.pop())]));\n    }\n\n    return hexlify(result);\n}\n\nexport function dnsEncode(name: string): string {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n\n    }))) + \"00\";\n}\n","\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n","export const AddressZero = \"0x0000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // This is the first filter for this event, so we want to\n                        // restrict events to events that happened no earlier than now\n                        if (event._lastBlockNumber === -2) {\n                            event._lastBlockNumber = blockNumber - 1;\n                        }\n\n                        // Filter from the last *known* event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild, since it is quite\n                        // likely there just haven't been any events to move the lastBlockNumber.\n                        const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        if (minFromBlock > filter.fromBlock) { filter.fromBlock = minFromBlock; }\n\n                        if (filter.fromBlock < 0) { filter.fromBlock = 0; }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n","export const HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n","\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n","\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    fetchOptions?: Record<string, string>;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\")},\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]): unpercent(dataMatch[3]))\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n","export const version = \"web/5.7.1\";\n"],"names":["RequestBatcher","sendBatchFn","maxBatchSize","pendingBatch","request","inflightRequest","resolve","undefined","reject","promise","Promise","this","push","length","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","map","inflight","then","result","forEach","index","payload","error","Error","message","code","data","AlchemyProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","url","throttleLimit","maxRetries","ethersNetwork","EthersNetwork","batchRequests","batcherConnection","Object","headers","batcher","requests","fetchJson","JSON","stringify","_super","detectNetwork","call","logWarn","DEFAULT_ALCHEMY_API_KEY","method","params","_send","methodName","forceBatch","id","_nextId","jsonrpc","enqueueRequest","emit","action","deepCopy","provider","cache","indexOf","_cache","getResult","response","CustomNetworks","getNetworkFromEthers","DEFAULT_NETWORK","values","Network","includes","join","type","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","allowGzip","JsonRpcProvider","decode","textData","atob","i","charCodeAt","arrayify","encode","String","fromCharCode","btoa","logger","Logger","ethDefaultProvider","func","providers","options","providerList","InfuraProvider","infura","EtherscanProvider","etherscan","alchemy","PocketProvider","pocket","name","CloudflareProvider","cloudflare","AnkrProvider","ankr","FallbackProvider","quorum","renetwork","etcDefaultProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","sepolia","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","value","defaultProvider","version","flat","array","depth","flatDeep","arr","val","Array","isArray","read_compressed_payload","bytes","v","pos","read_payload","u16","symbol_count","total","acc","skip","pos_payload","read_width","read_buffer","read_bit","FULL","Math","HALF","QRTR","MASK","register","symbols","low","range","floor","start","end","mid","a","b","offset","x","decode_arithmetic","signed","read_ascending","n","next","read_deltas","read_member_array","lookup","vX","vN","read_counts","j","read_transposed","w","m","fill","read_linear_table","dx","dy","read_zero_terminated_array","ys","slice","_","j_dy","y","read_replacement_table","r","VALID","Set","IGNORED","MAPPED","ret","fromEntries","read_mapped_map","EMOJI_ROOT","sorted","sort","read","branches","keys","set","node","size","temp","valid","fe0f","save","check","read_emoji_trie","explode_cp","toUtf8CodePoints","filter_fe0f","cps","filter","cp","ens_normalize_post_check","split","label","lastIndexOf","every","err","ens_normalize","emoji_filter","input","reverse","output","emoji","consume_emoji_reversed","pop","has","toString","toUpperCase","s","fromCodePoint","normalize","eaten","saved","stack","find","_a","splice","Zeros","Uint8Array","checkComponent","comp","ensNameSplit","toUtf8Bytes","comps","last","namehash","keccak256","concat","hexlify","Formatter","formats","getDefaultFormats","address","bind","bigNumber","blockTag","hash","hex","number","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","nonce","uint256","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","shallowCopy","transactionResponse","fromBlock","toBlock","filterLog","removed","boolean","allowFalsish","accessListify","BigNumber","toNumber","toLowerCase","strict","substring","isHexString","getAddress","hexDataSlice","getContractAddress","hexValue","hexDataLength","hexZeroPad","format","author","_difficulty","_block","gas","isZero","networkId","parseInt","replace","parseTransaction","byzantium","object","key","checkKey","checkValue","nullValue","replaceValue","checkTopic","topic","serializeTopics","unique","getEventTag","eventName","ForkEvent","warn","getTime","Date","stall","duration","PollableEvents","Event","tag","listener","once","defineReadOnly","_lastBlockNumber","_inflight","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","Base58","sha256","matcherIpfs","RegExp","matchers","_parseString","toUtf8String","_parseBytes","getIpfsLink","link","match","numPad","padded","bytesPad","ceil","encodeBytes","datas","byteCount","hexConcat","Resolver","resolvedAddress","formatter","_supportsEip2544","eq","catch","selector","parameters","tx","ccipReadEnabled","parseBytes","supportsWildcard","throwError","CALL_EXCEPTION","_fetch","coinType","hexBytes","coinInfo","operation","words","bech32","unshift","HashZero","callAddress","_fetchBytes","_getAddress","linkage","content","getText","avatar","scheme","_resolvedAddress","owner","addr","tokenId","tokenOwner","balance","metadataUrl","metadata","imageUrl","image","ipfs","ipns","swarm","skynet","urlSafe","base64Encode","keyBytes","defaultFormatter","nextPollId","BaseProvider","_events","_emitted","disableCcipRead","getFormatter","anyNetwork","_networkPromise","_ready","knownNetwork","getStatic","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","poll","event","calldata","urls","sender","errorMessages","href","json","errorPassThrough","statusCode","errorMessage","maxAge","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","resolveProperties","perform","networkError","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","minFromBlock","getLogs","log","all","polling","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","now","getBlockNumber","timeout","_waitForTransaction","replaceable","cancelFuncs","done","alreadyDone","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","getTransaction","mined","getBlockWithTransactions","ti","waitForTransaction","reason","cancelled","replacement","_wrapTransaction","timer","unref","addressOrName","_getBlockTag","position","p","expectedHash","returnedHash","wait","confirms","signedTransaction","t","hexTx","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","ccipReadFetch","ccipResult","_call","SERVER_ERROR","_getTransactionRequest","resolved","resolveName","blockHashOrBlockTag","includeTransactions","blockWithTxs","oncePoll","_getBlock","_getFilter","currentName","_getResolver","resolver","addrData","getResolver","resolverAddr","nameOrAddress","resolverAddress","getAvatar","e","pollable","_startEvent","_addEventListener","args","stopped","eventTag","apply","_stopEvent","removeAllListeners","found","Provider","errorGas","spelunk","requireData","parse","checkError","body","responseText","getLowerCase","_constructorGuard","JsonRpcSigner","constructorGuard","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","estimateGas","constructor","hexlifyTransaction","sendUncheckedTransaction","messageData","domain","types","_TypedDataEncoder","populated","password","Signer","allowedTransactionKeys","networkOrReady","freeze","_eventLoopCache","_uncachedDetectNetwork","serverError","getSigner","connectUnchecked","getFeeData","feeData","prepareRequest","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","listenerCount","allowExtra","allowed","checkProperties","getUrl","skipFetchSetup","mode","credentials","redirect","referrer","fetchOptions","opts","fetch","arrayBuffer","get","statusMessage","statusText","staller","bodyify","isBytesLike","trim","processFunc","updated","k","attemptLimit","assertArgument","throttleCallback","throttleSlotInterval","allow304","user","allowInsecureAuthentication","argument","authorization","reData","dataMatch","base64Decode","requestBody","requestMethod","flatHeaders","header","runningTimeout","cancel","runningFetch","location","tryAgain","retryAfter","random","pow","throttleRetry","race","_fetchData","ceiling","interval","retryLimit","onceBlock"],"sourceRoot":""}